trigger:
- main

pool:
  name: 'Default'   # tu agente self-hosted

steps:
# 1) Instala .NET SDK (ajusta a 8.x o 7.x si tu proyecto usa otra)
- task: UseDotNet@2
  displayName: 'Install .NET SDK'
  inputs:
    packageType: 'sdk'
    version: '8.x'

# 2) Restore
- task: DotNetCoreCLI@2
  displayName: 'Restore'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

# 3) Build (Release)
- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration Release --no-restore'

# 4) Publish artefacto -> SELF-CONTAINED SINGLE FILE para linux-x64
- task: DotNetCoreCLI@2
  displayName: 'Publish (self-contained linux-x64 single-file)'
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: >
      --configuration Release
      -r linux-x64
      --self-contained true
      /p:PublishSingleFile=true
      /p:PublishTrimmed=false
      /p:IncludeNativeLibrariesForSelfExtract=true
      /p:UseAppHost=true
      /p:DebugType=None
      /p:DebugSymbols=false
      --output $(Build.ArtifactStagingDirectory)
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Upload artifact'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'

# ===== DEPLOY A VM POR SSH (simple y determinista) =====
- task: CopyFilesOverSSH@0
  displayName: 'Copiar artefacto a VM'
  inputs:
    sshEndpoint: 'SSH_VM'                      # <- nombre exacto de tu Service Connection
    sourceFolder: '$(Build.ArtifactStagingDirectory)'
    contents: '*.zip'
    targetFolder: '/var/www/app'
    overwrite: true

- task: SSH@0
  displayName: 'Descomprimir y arrancar ejecutable'
  inputs:
    sshEndpoint: 'SSH_VM'
    runOptions: 'inline'
    inline: |
      set -e
      sudo apt-get update -y || true
      sudo apt-get install -y unzip psmisc || true

      cd /var/www/app
      ZIP_FILE=$(ls -1 *.zip | head -n1)
      rm -rf release && mkdir -p release
      unzip -o "$ZIP_FILE" -d release

      echo "== Contenido de release =="
      find release -maxdepth 2 -type f -printf "  %p\n" || true

      # Matar procesos anteriores
      pkill -f 'release/' || true
      sleep 1

      # Buscar ejecutable self-contained (single-file) y ejecutarlo
      APP=$(find release -maxdepth 1 -type f \
            ! -name "*.dll" ! -name "*.json" ! -name "*.pdb" \
            ! -name "*.config" ! -name "*.map" ! -name "*.txt" ! -name "*.md" \
            | head -n1 || true)

      if [ -z "$APP" ]; then
        echo "ERROR: No encontré ejecutable self-contained en 'release/'."
        find release -type f -printf "  %p\n"
        exit 1
      fi

      echo "== Ejecutable detectado: $APP"
      chmod +x "$APP" || true
      nohup "$APP" --urls "http://0.0.0.0:5000" > app.log 2>&1 &

      # Validación mínima: proceso escuchando/activo
      sleep 2
      pgrep -fa "release/" || (echo "No quedó corriendo"; tail -n 200 app.log; exit 1)
